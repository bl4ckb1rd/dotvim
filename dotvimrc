" vimrc by Bl4ckB1rd
" srcs:
"  . https://github.com/fisadev/fisa-vim-config/blob/master/.vimrc

set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'


"""" Plugin plugins """"
"" StatusLine
Plugin 'bling/vim-airline'
"" Explorer
Plugin 'scrooloose/nerdtree'
"" transparent pasting
Plugin 'vim-scripts/DotOutlineTree'
Plugin 'ConradIrwin/vim-bracketed-paste'

Plugin 'mbbill/undotree'
" http://vimawesome.com/plugin/ctrlp-vim-state-of-grace
Plugin 'ctrlpvim/ctrlp.vim'
" http://vimawesome.com/plugin/easymotion
Plugin 'Lokaltog/vim-easymotion'
Plugin 'sjl/gundo.vim'

"" Organizers
Plugin 'hsitz/VimOrganizer'

"" Git plugins
Plugin 'tpope/vim-fugitive'
Plugin 'gregsexton/gitv'
" http://vimawesome.com/plugin/vim-gitgutter
Plugin 'airblade/vim-gitgutter'
" http://vimawesome.com/plugin/git-zip
Plugin 'tpope/vim-git'

""" Dev plugins
"" Source Code Explorer
Plugin 'wesleyche/SrcExpl'
"" Autocomplete
" Plugin 'Shougo/neocomplcache.vim'
Plugin 'vim-scripts/TaskList.vim'
Plugin 'majutsushi/tagbar'
" http://vimawesome.com/plugin/ref-vim
Plugin 'thinca/vim-ref'
""" comment
" http://vimawesome.com/plugin/the-nerd-commenter
Plugin 'scrooloose/nerdcommenter'
""" virtualenv https://github.com/jmcantrell/vim-virtualenv
"Plugin 'jmcantrell/vim-virtualenv'

""" syntaxt
Plugin 'lepture/vim-jinja'
"Plugin 'elzr/vim-json'
" javascript
Plugin 'pangloss/vim-javascript'
" http://vimawesome.com/plugin/vim-markdown-safe-and-sound
Plugin 'tpope/vim-markdown'
" http://vimawesome.com/plugin/vim-less-safe-and-sound
Plugin 'groenewege/vim-less'
" http://vimawesome.com/plugin/html5-vim
Plugin 'othree/html5.vim'
"""
Plugin 'scrooloose/syntastic'
""" Style better code
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'Valloric/MatchTagAlways'
""" Python
Plugin 'klen/python-mode'
Plugin 'kevinw/pyflakes-vim'
Plugin 'nvie/vim-flake8'
"Plugin 'Shougo/neocomplete.vim'
""" ycm give an error 2016/03/08
Plugin 'Valloric/YouCompleteMe'
"Plugin 'davidhalter/jedi-vim'
" http://vimawesome.com/plugin/auto-pairs
Plugin 'jiangmiao/auto-pairs'
" http://vimawesome.com/plugin/indentline
"Plugin 'Yggdroot/indentLine'
" completition DB stuff
"Plugin 'dbext.vim'

"" Math plugins
Plugin 'Rykka/mathematic.vim'

"" Theme plugins
Plugin 'zeis/vim-kolor'
Plugin 'altercation/vim-colors-solarized'
Plugin 'bl4ckb1rd/wombat256.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
filetype on            " enables filetype detection
filetype plugin on     " enables filetype specific plugins

" The rest of your config follows here
" change the mapleader from \ to ,
let mapleader=","
"" Saving marks and jumps
set viminfo='100,f1
"" History records
set history=5000
set undolevels=1000      " use many muchos levels of undo
"" display incomplete command
set showcmd
"" searching options
set incsearch
set ignorecase
set smartcase
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
nmap <silent> ,/ :nohlsearch<CR>

set visualbell           " don't beep
set noerrorbells         " don't beep
set wildmode=longest:full,full
set wildmenu

set splitright
set splitbelow

" Highlight Warning on 79+ lines and Error on 81+
"au BufWinEnter * let w:m1=matchadd('Search', '\%<81v.\%>79v', -1)
"au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)

autocmd BufEnter * lcd %:p:h " change directory the current file's

autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

" themes options
"" 256 colors support =)
set t_Co=256
"" show the cursor position all the time
set ruler
"" nice cursor line highlight
set cursorline cursorcolumn
hi CursorLine guibg=#000000 ctermbg=235 cterm=NONE
hi CursorColumn guibg=#000000 ctermbg=235 cterm=NONE

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

" Exec something and restore position
function! <SID>ExecAndRestore(cmd)
    " Preparation: save last search, and cursor position.
    let cmd=a:cmd
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    exec cmd
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Expand tabs
nnoremap <silent> <leader>e :call <SID>ExecAndRestore("%s/\t/    /g")<CR>
" Strip white spaces
nnoremap <silent> <leader>s :call <SID>ExecAndRestore('%s/\s\+$//e')<CR>
" sync syntax
nnoremap <silent> <leader>r :syntax sync fromstart<CR>

"" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

set undodir=~/tmp/vim/undo/ " undo files
set backupdir=~/tmp/vim/backup/ " backups
set directory=~/tmp/vim/swap/ " swap files
set backup " enable backups

" Disabled mouse active visual mode
set mouse-=a

" use a wrapper script to get http://*
let g:netrw_http_cmd = "netrw_http_cmd"

" style coding
"let b:did_ftplugin = 1
"syntax on
" all types
set expandtab
set shiftwidth=2
set softtabstop=2
set autoindent
" python PEP 8
autocmd FileType python setlocal et
autocmd FileType python setlocal expandtab
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal sw=4
autocmd FileType python setlocal smarttab
"autocmd FileType python setlocal tabstop=8
autocmd FileType python setlocal autoindent
" html 2 spaces
" try to follow: http://www.w3schools.com/html/html5_syntax.asp
"autocmd FileType html setlocal et
autocmd FileType html setlocal expandtab
autocmd FileType html setlocal shiftwidth=2
autocmd FileType html setlocal softtabstop=2
autocmd FileType html setlocal sw=2
autocmd FileType html setlocal smarttab
"autocmd FileType html setlocal tabstop=2
autocmd FileType html setlocal autoindent
" Redefine filetype
autocmd FileType htmldjango set filetype=htmljinja
autocmd FileType html set filetype=htmljinja
"let g:html_indent_inctags = "html,body,head,tbody"
"let g:html_indent_script1 = "inc"
"let g:html_indent_style1 = "inc"
" java
autocmd FileType java setlocal et
autocmd FileType java setlocal expandtab
autocmd FileType java setlocal shiftwidth=4
autocmd FileType java setlocal softtabstop=4
autocmd FileType java setlocal sw=4
autocmd FileType java setlocal smarttab
autocmd FileType java setlocal autoindent
" javascript
autocmd FileType javascript setlocal et
autocmd FileType javascript setlocal expandtab
autocmd FileType javascript setlocal shiftwidth=4
autocmd FileType javascript setlocal softtabstop=4
autocmd FileType javascript setlocal sw=4
autocmd FileType javascript setlocal smarttab
autocmd FileType javascript setlocal autoindent

" syntax js in .py
function! AddSyntax()
  let b:current_syntax = ''
  unlet b:current_syntax

  syntax include @JSCode $VIMRUNTIME/syntax/javascript.vim
  syntax region rgnJS start='# start js code' end='# end js code' contains=@JSCode
  let b:current_syntax = ''
  unlet b:current_syntax
  let b:current_syntax='combined'
endfunction

" Show “invisible” characters
"set list "display spaces
"set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_ "everything else

""""""""""""""
" tmux fixes "
""""""""""""""
" Handle tmux $TERM quirks in vim
if $TERM =~ '^screen-256color'
    map <Esc>OH <Home>
    map! <Esc>OH <Home>
    map <Esc>OF <End>
    map! <Esc>OF <End>
endif

" XXX maps keys
"" remap move around splited window
"nmap <silent> <A-Up> :wincmd k<CR>
"nmap <silent> <A-Down> :wincmd j<CR>
"nmap <silent> <A-Left> :wincmd h<CR>
"nmap <silent> <A-Right> :wincmd l<CR>
"" disable pageup and pagedown
nmap <PageUp> <Nop>
nmap <PageDown> <Nop>
imap <PageUp> <Nop>
imap <PageDown> <Nop>
"" Control + n/p to move in tabs
let g:multi_cursor_next_key='<C-m>'
nnoremap <silent> <C-n> :tabnext<CR>
nnoremap <silent> <C-p> :tabprev<CR>
"" paste toggle
set pastetoggle=<F6>
"" Tasklist and taglist
"nnoremap <silent> <leader>r :syntax sync fromstart<CR>
nnoremap <silent> <leader>p :TagbarToggle<CR>
nnoremap <silent> <leader>n :NERDTreeToggle<CR>
nmap <F8> :SrcExplToggle<CR>
" resize
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

autocmd BufEnter *.py call AddSyntax()
set encoding=utf-8

"" XXX Useful functions
" Replace all chars
function! <SID>ReplaceCharsSrt()
    exec "%s/á/a/g"
    exec "%s/é/e/g"
    exec "%s/í/i/g"
    exec "%s/ó/o/g"
    exec "%s/ú/u/g"
    exec "%s/ñ/ni/g"
    exec "%s/¡//g"
    exec "%s/¿//g"
    exec "%s/<i>//g"
    exec "%s#</i>##g"
endfunction
nnoremap <silent> <leader>c :call <SID>ReplaceCharsSrt()<CR>

" Insert ipython debug
function! InsertIpython()
    r~/.vim/templates/python/ipython.txt
endfunction
nnoremap <silent> <leader>i :call InsertIpython()<CR>

"" XXX Config Bundle's
" airline setup
set laststatus=2
let g:airline_powerline_fonts = 1

" syntastic config
" TODO Add shellcheck
"let g:flake8_cmd='/usr/bin/flake8-python2'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_wq = 1
"let g:syntastic_python_checkers=['flake8', 'pylint']
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_python_exe = '/usr/bin/python3'

" XXX ycm YouCompleteMe
" options commented are default values
" more options: https://github.com/Valloric/YouCompleteMe
" let g:ycm_min_num_of_chars_for_completion = 2
" let g:ycm_min_num_identifier_candidate_chars = 0
" let g:ycm_auto_trigger = 1
" let g:ycm_filetype_whitelist = { '*': 1 }
" let g:ycm_collect_identifiers_from_comments_and_strings = 0
" let g:ycm_collect_identifiers_from_tags_files = 0
let g:ycm_seed_identifiers_with_syntax = 1
" let g:ycm_add_preview_to_completeopt = 0
" let g:ycm_autoclose_preview_window_after_completion = 0
" let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
" let g:ycm_key_invoke_completion = '<C-Space>'
" let g:ycm_python_binary_path = '/usr/bin/python3'
let g:ycm_server_python_interpreter = '/usr/bin/python3'

" XXX Python-mode
" let pymode = 1
" let pymode_breakpoint = 1
" let pymode_breakpoint_bind = '<leader>b'
" let pymode_run_bind = '<leader>r'
" let pymode_doc = 1
" let pymode_doc_bind = 'K'
" let pymode_folding = 0
" let pymode_indent = 1
" let pymode_lint = 1
" let pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
" let pymode_lint_cwindow = 1
" let pymode_lint_ignore = ''
" let pymode_lint_message = 1
" let pymode_lint_on_fly = 0
" let pymode_lint_on_write = 0
" let pymode_lint_select = ''
" let pymode_lint_signs = 0
" let pymode_motion = 1
" let pymode_options = 1
" let pymode_paths = []
" let pymode_quickfix_maxheight = 6
" let pymode_quickfix_minheight = 3
" let pymode_rope = 0
" let pymode_run = 1
" let pymode_trim_whitespaces = 1
" let pymode_virtualenv = 1
" let g:pymode_python = 'python3'
let g:pymode_options_colorcolumn = 1
" don't use linter, we use syntastic for that
let g:pymode_lint_on_write = 0
let g:pymode_lint_signs = 0
" don't fold python code on open
let g:pymode_folding = 0
" don't load rope by default. Change to 1 to use rope
let g:pymode_rope = 0
" open definitions on same window, and custom mappings for definitions and
" occurrences
let g:pymode_rope_goto_definition_bind = ',d'
let g:pymode_rope_goto_definition_cmd = 'e'
nmap ,D :tab split<CR>:PymodePython rope.goto()<CR>
nmap ,o :RopeFindOccurrences<CR>

" gundo
nnoremap <F5> :GundoToggle<CR>

" Undo persistent
if has("persistent_undo")
    set undodir='~/.undodir/'
    set undofile
endif

" ctrlp config
let g:ctrlp_map = '<c-j>'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc
"let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
"let g:ctrlp_custom_ignore = {
"  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
"  \ 'file': '\v\.(exe|so|dll)$',
"  \ 'link': 'some_bad_symbolic_links',
"  \ }

" mathematica cnfig
" use it
map <leader>km :set keymap=mathematic<CR>
" stop use it
map <leader>kn :set keymap=<CR>

" rainbow_parentheses
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" MatchTagsAlways
let g:mta_use_matchparen_group = 1

" Theme
"let g:solarized_termtrans = 1
syntax enable
set background=dark
colorscheme wombat256mod
set colorcolumn=79
"colorscheme solarized
"" Change higligth!!
hi SpellBad term=reverse ctermbg=1 gui=undercurl guisp=Red
hi SpellCap term=reverse ctermbg=1 gui=undercurl guisp=Red
hi SpellLocal term=reverse ctermbg=1 gui=undercurl guisp=Red
hi SpellRare term=reverse ctermbg=1 gui=undercurl guisp=Red

" YCM prevent open split with preview
set completeopt-=preview
" disable number of lines
set nonumber
setlocal nonumber
